[{"content":"Introduction Software development is akin to the art of craftsmanship, where the tools we use are lines of code, and our canvas is the digital world. To create masterpieces, we must follow certain principles and design patterns, and one such fundamental principle is the Single Responsibility Principle (SRP). In this article, we will explore the essence of SRP and demonstrate its power through code examples in C#.\nThe Single Responsibility Principle The Single Responsibility Principle is one of the five SOLID principles of object-oriented programming. It was introduced by Robert C. Martin, also known as Uncle Bob, as a cornerstone of clean code and software design. At its core, SRP states that a class should have only one reason to change. In other words, a class should have a single responsibility.\nThe essence of SRP lies in separating concerns. When a class has multiple responsibilities, it becomes harder to understand, modify, and maintain. By adhering to SRP, we ensure that each class has a well-defined purpose, making our code more modular, flexible, and resilient.\nCode Example: Violating SRP Let\u0026rsquo;s consider a typical example that violates SRP. Imagine we are building an employee management system in C#, and we have a class named Employee:\npublic class Employee { public string Name { get; set; } public decimal Salary { get; set; } public void CalculateSalary() { // Calculate the salary based on various factors } public void SaveToDatabase() { // Save employee data to the database } } In this example, the Employee class has two distinct responsibilities:\nCalculating an employee\u0026rsquo;s salary. Saving employee data to the database. This design violates the SRP since the class has more than one reason to change. If the salary calculation logic or database interaction logic needs to change, it will affect the Employee class, making it harder to maintain and test.\nCode Example: Adhering to SRP To follow SRP, we can split the Employee class into two separate classes, each with a single responsibility:\npublic class Employee { public string Name { get; set; } public decimal Salary { get; set; } } public class SalaryCalculator { public decimal CalculateSalary(Employee employee) { // Calculate the salary based on various factors } } public class EmployeeRepository { public void SaveToDatabase(Employee employee) { // Save employee data to the database } } Now, we have three classes, each with a single responsibility. The Employee class represents the employee\u0026rsquo;s data, the SalaryCalculator class calculates the salary, and the EmployeeRepository class handles database operations. This separation of concerns makes the codebase more maintainable and flexible. If we need to modify the salary calculation logic, it won\u0026rsquo;t affect the database operations, and vice versa.\nBenefits of SRP\nImproved Maintainability: Code adhering to SRP is easier to maintain since each class has a clear, well-defined purpose.\nEnhanced Testability: Classes with a single responsibility are easier to test because their behavior is isolated.\nReusability: Single responsibility classes can be reused in different contexts without worrying about unintended side effects.\nScalability: Adhering to SRP paves the way for future scalability, as adding new features or responsibilities can be done without disrupting existing code.\nConclusion The Single Responsibility Principle is a fundamental concept in software design that promotes cleaner, more maintainable code. By ensuring that each class has a single, well-defined responsibility, we make our code more modular, testable, and adaptable. As software craftsmen, we must always strive to adhere to SRP and other SOLID principles to create software masterpieces that stand the test of time.\n","permalink":"http://example.org/blog/single-responsibility-principle/","summary":"Introduction Software development is akin to the art of craftsmanship, where the tools we use are lines of code, and our canvas is the digital world. To create masterpieces, we must follow certain principles and design patterns, and one such fundamental principle is the Single Responsibility Principle (SRP). In this article, we will explore the essence of SRP and demonstrate its power through code examples in C#.\nThe Single Responsibility Principle The Single Responsibility Principle is one of the five SOLID principles of object-oriented programming.","title":"Single Responsibility Principle (SRP)"},{"content":" فى عالم software development لازم تلتزم بمبادئ SOLID، عشان تقدر تكتب كود maintainable و flexible و reusable، وكل حرف من حروف مبادئ SOLID بيكون اختصار لمبدأ منهم أى هو SRP ؟ انهارده هكلمك عن أول مبدأ من مبادئ SOLID وهو مبدأ Single Responsibility Principle، نص المبدأ دا بيقول أن كل Class لازم يكون له مسؤولية Responsibility واحدة بس ويكون فيها سبب واحد بس للتعديل وتغيير عليه.\nClasses should have a single responsibility and thus only a single reason to change.\nومادام Class عنده مسؤولية واحدة فأكيد هيكون فى سبب واحد بس لتغيير، ودا هيقلل التعقيد Complexity فى الكود ويخليه سهل الفهم و الصيانة\nوبغض النظر عن عدد Methods جواه Class لازم يكونوا بيخدموا غرض واحد ومسؤولية واحدة وهدف واحد.\nطب ليه أقلق لو Class عنده أكتر من Responsibility أو Functionality وليه لازم أفصلهم عن بعض ؟\nهقول أنا ليه\nمثلا لو عندى سبيبين عشان أعدل فى Class فلازم أقسم Functionality لكلاسين اتنين، عشان لو عندى أكتر من Functionality واحدة فى Class دا هيخلى فيه Coupling بين Functionalities الكتير اللى فى الكلاس , فلو هغير فى واحدة منهم ممكن يبقا فيه فرصة يحصل كسر للاقتران بين وظفتين Broke Coupling Functionality فى Class.\nعشان كدا لازم أخلى الكلاس عنده مسؤولية واحدة والكلاس ساعتها يبقا More Cohesive و يقل Coupling.\nمثال على الماشي كدا لو أنا عندى كلاس بيرجع داتا من Database و بيعرضها لل User فالحالة دى الكلاس عندي عنده مسؤليتين الأولى Retrieve الداتا من Database و التانية Display الداتا، فهنا لازم أقسم الكلاس ل كلاسين الأول عشان retrieve الداتا بس و التانى display داتا بس\nليه بحتاج أطبق SRP ؟ وأنا بتطور أو ببنى اى Application او Project بيكون عندى Features او Functionalities اللى Project بيقدمها واللى اقدر اقول عليها Responsibilities ، فبقسم ال Application ل Modules او Classes عشان أوزع المسؤليات دي بحيث يبقا Project سهل القراءة Readable والفهم Understandable و يكون قابل للصيانة Maintainable فى أى وقت و كمان بيكون قابل للاختبار Testable ودا عشان كل Class بيكون له Methods الخاصة به فيكون من السهل أنى أعمل عليها Unit Tests.\nمثال ب #C لو عندى مثلا كلاس زى دا\nclass Customer { public string Name { get; set; } public string Email { get; set; } public bool Validate() { // Valid if the customer is valid } public void Save() { // Save the customer in the database } } أبص وأشوف هل كلاس Customer ينفع تكون مسؤليته Validate أو Save هنا بقا أشغل الانذار وأطبق SRP وأقسم Responsibilities.\nف ال Customer Class يبقا فيه بس Information بتاعت Customer ، وValidation هنقله فى كلاس لوحده ،وحفظ Customer فى Database فى كلاس لوحده\nclass CustomerValidator { public bool Validate(Customer customer) { // Valid if the client is valid } } class CustomerRepository { public void Save(Customer customer) { // Save the customer in the database } } class Customer { public string Name { get; set; } public string Email { get; set; } } ","permalink":"http://example.org/blog/srp-arabic/","summary":"فى عالم software development لازم تلتزم بمبادئ SOLID، عشان تقدر تكتب كود maintainable و flexible و reusable، وكل حرف من حروف مبادئ SOLID بيكون اختصار لمبدأ منهم أى هو SRP ؟ انهارده هكلمك عن أول مبدأ من مبادئ SOLID وهو مبدأ Single Responsibility Principle، نص المبدأ دا بيقول أن كل Class لازم يكون له مسؤولية Responsibility واحدة بس ويكون فيها سبب واحد بس للتعديل وتغيير عليه.\nClasses should have a single responsibility and thus only a single reason to change.","title":"Single Responsibility Principle بالعربي"},{"content":"🔗 GitHub Description BethanysPieShop is a dynamic and user-friendly web application developed using ASP.NET Core MVC. It offers an engaging platform for both customers and administrators to explore, purchase delicious pies, and manage their pie orders. This project showcases a range of features, including:\nPie Catalog: An extensive catalog that displays a wide variety of mouthwatering pies, complete with detailed descriptions and high-quality images. Users can browse and filter pies based on categories, flavors, and more.\nUser Authentication: A secure user authentication system, enabling users to register, log in, and manage their profiles. This functionality ensures a personalized shopping experience for each user.\nShopping Cart: An intuitive shopping cart that allows customers to add their favorite pies, review their selections, and complete the checkout process with ease. Real-time updates on cart contents and prices ensure a seamless shopping experience.\nOrder Management: Registered users can track and manage their pie orders. They can view order history, reorder their favorite pies, and check the status of pending orders.\nSearch Functionality: A robust search feature that empowers users to quickly find specific pies using keywords, flavors, or categories.\nResponsive Design: A mobile-responsive and visually appealing design that ensures a smooth experience across various devices and screen sizes.\nTechnologies Used ASP.NET Core MVC Entity Framework Core for database interaction Identity Framework for user authentication HTML, CSS, and JavaScript for front-end development Bootstrap for responsive design SQL Server for data storage ","permalink":"http://example.org/projects/bethanys-pie-shop/","summary":"🔗 GitHub Description BethanysPieShop is a dynamic and user-friendly web application developed using ASP.NET Core MVC. It offers an engaging platform for both customers and administrators to explore, purchase delicious pies, and manage their pie orders. This project showcases a range of features, including:\nPie Catalog: An extensive catalog that displays a wide variety of mouthwatering pies, complete with detailed descriptions and high-quality images. Users can browse and filter pies based on categories, flavors, and more.","title":"Bethany's Pie Shop"},{"content":"🔗 View App 🔗 GitHub Description A simple movies website using ASP.NET Core where you can add, edit, and delete movies. Users can log in securely, and the website ensures their data is protected. It\u0026rsquo;s a user-friendly platform with a focus on movies.\n","permalink":"http://example.org/projects/movies-mvc/","summary":"🔗 View App 🔗 GitHub Description A simple movies website using ASP.NET Core where you can add, edit, and delete movies. Users can log in securely, and the website ensures their data is protected. It\u0026rsquo;s a user-friendly platform with a focus on movies.","title":"Movies MVC Project"},{"content":"🔗 View App 🔗 GitHub Description PickPark is an innovative web application built on Express.js and GraphQL, designed to revolutionize parking management for both users and administrators. Users can effortlessly search, reserve, and pay for parking spaces in real-time, receive navigation directions, and stay updated with notifications. They can also bookmark their favorite spots and manage their vehicles within the app.\nFeatures Users: Searching for nearby parking spaces Real-time parking data about availability and rates Reserving and paying for parking spots in advance Getting navigation and directions to the parking spot Receiving notifications about their parking status Bookmarking their favorite parking spaces Managing their vehicles Parking Spaces: Integrating IoT devices that help providing real-time data about the parking spaces Viewing parking revenue and transaction history Generating reports and analytics on parking space usage and revenue Admin: Managing user accounts and access control Managing parking lots and spaces App configuration ","permalink":"http://example.org/projects/pickpark-api/","summary":"🔗 View App 🔗 GitHub Description PickPark is an innovative web application built on Express.js and GraphQL, designed to revolutionize parking management for both users and administrators. Users can effortlessly search, reserve, and pay for parking spaces in real-time, receive navigation directions, and stay updated with notifications. They can also bookmark their favorite spots and manage their vehicles within the app.\nFeatures Users: Searching for nearby parking spaces Real-time parking data about availability and rates Reserving and paying for parking spots in advance Getting navigation and directions to the parking spot Receiving notifications about their parking status Bookmarking their favorite parking spaces Managing their vehicles Parking Spaces: Integrating IoT devices that help providing real-time data about the parking spaces Viewing parking revenue and transaction history Generating reports and analytics on parking space usage and revenue Admin: Managing user accounts and access control Managing parking lots and spaces App configuration ","title":"PickPark (Graduation Project)"},{"content":"🔗 GitHub 🔗 View Project 🔗 Certificate Description I completed an internship at ITI, where I received intensive training in web development using .NET. This comprehensive program covered SQL Server, C#, LINQ, Entity Framework, and MVC architecture. The highlight of the internship was a project focused on Movies CRUD operations, as well as authentication and authorization. ","permalink":"http://example.org/internships/iti-training/","summary":"🔗 GitHub 🔗 View Project 🔗 Certificate Description I completed an internship at ITI, where I received intensive training in web development using .NET. This comprehensive program covered SQL Server, C#, LINQ, Entity Framework, and MVC architecture. The highlight of the internship was a project focused on Movies CRUD operations, as well as authentication and authorization. ","title":"Web Development Using .NET"}]